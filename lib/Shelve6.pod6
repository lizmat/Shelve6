=begin pod

=head1 NAME

Shelve6

=head1 DESCRIPTION

An artifact repository for the Raku Programming Language and friends

The goal is to build a artifact repository service that Raku modules, but
also other stuff, can be pushed to and pulled via the usual means (i.e.
pushed from CI or manual workflows, pulled via C<zef>). This would be
useful for an organisation doing Raku development, does not want all
their code publicly available, yet want to use a regular module-centric,
tarball/release-based development flow.

Essentially this is a "content storage" service as described in
L<S22|https://design.raku.org/S22.html#content_storage>.

=head1 FEATURES

=item Upload Raku modules
=item Fetch with zef
=item Authentication
=item Multiple configurable logical repos

=head1 Upcoming and ToDo

=item cucumis sextus tests
=item adress already in use error handling/reporting
=item UI to browse and manage
=item API to manage and automate
=item Local cache/proxy for other repositories, like CPAN. Could be just a cache, or a fetch-ahead full copy. Perhaps both, configurably.
=item Rarification/expiry of artifacts in configured repositories
=item Web hooks for automation
=item Verification and other plugins
=item Shared file store, multiple shelve6 instances. Or a database as a store.
=item More auth types
=item Full-blown monitoring, resilience etc 
=item More metadata, like when uploaded and by whom. "on-behalf" in upload script so that a CI or automation job can say on whose command they uploaded

Also grep for the `XXX` fixmes in the code!

=head1 USAGE

Shelve6 comes as a web service that you can just start e.g. directly from
the checked-out source repository via C<RAKUDOLIB=lib bin/shelve6>, or if
it is properly installed just via C<shelve6>. It reads a config.yaml file,
a simple sample is included, and might look like this:

=begin code :lang<yaml>
    server:
        port: 8080
        base-url: "http://localhost:8080"
    store:
        basedir: store
    repositories:
        - name: p6repo
=end code

=item base-url

is where you want the service to be found externally.

=item port

is of course the port the service listens on, note that  it currently
only binds to the first localhost interface, let me know if that gives
you grief.

=item basedir

is a directory where shleve6 will store the artifacts.

=item repositories

is a list of logical artifact repositories in which you can store modules.

With the service running, you can use the supplied shelve6-upload script to put
artifacts into shelve6:

=begin code

bin/shelve6-upload raku-foo-bar-0.1.tar.gz http://localhost:8080/repos/p6repo

=end code

This script is just a thin wrapper around C<curl>, you just need a multipart
form post really.

In order to fetch artifacts, you need to configure your C<zef> to recognise
the repository. In my case I have a C<~/.config/zef/config.json>, where in
the `Repository` section I added:

=begin code :lang<json>
    {
        "short-name" : "shelve6",
        "enabled" : 1,
        "module" : "Zef::Repository::Ecosystems",
        "options" : {
            "name" : "shelve6",
            "auto-update" : 1,
            "mirrors" : [
                "http://localhost:8080/repos/p6repo/packages.json"
            ]
        }
    },
=end code

After that, C<zef> happily pulls from shelve6!

=head1 AUTHENTICATION / AUTHORIZATION

If you want to use the repository for private code, it may be a good idea to
enable some security on it. Shelve6 can use credentials in the request and map
them to a set of roles associated with that credential. Currently the only
credential type supported are 'opaque' tokens, these are just striings that are
not looked into (so not JWT or so). These come in a HTTP header like
`Authorization: Bearer supersecret`, where 'supersecret' is the credential. In
the future more credential types can be supported. To configure the mapping of 
credentials to roles, extend the 'server' part of the configuration:

=begin code :lang<yaml>
server:
    port: 8080
    base-url: "http://localhost:8080"
    authentication:
        opaque-tokens:
            - token: supersecret
              roles: [CI]
              owner: raku-ci-1
            - token: eng8ahquia2kungeitaequie
              roles: [DEV, ADMIN]
              owner: Max Mustermann <mmustermann@megacorp
=end code

In order to actually require any roles, you need to configure which roles allow
what operation, on the repository:

=begin code :lang<yaml>
repositories:
    - name: p6repo
      authorization:
        upload: [CI, DEV, ADMIN]
        download: [CI, DEV, ADMIN]
        delete: [ADMIN]
=end code

Note that the credential is associated with all the roles from the server
config, but any role in the repository section is sufficient for access
to be granted. For example the credential 'eng8ahquia2kungeitaequie' above
gives both the 'DEV' and the 'ADMIN' roles, any of which would be enough
to upload and download artifacts.

The C<shelve6-upload> script supports setting these tokens through a
commandline argument or an environment variable.

In order to enable C<zef> to provide credentials during module fetching,
you need to install the C<Zef::Service::AuthenticatedDownload> plugin:

=begin code
    zef install Zef::Service::AuthenticatedDownload
=end code

And configure it. The C<zef> README explains where you can find the zef
config, where you can add the plugin and configure it, which is best
done before the other web fetchers to avoid them trying to download and
failing due to auth:

=begin code :lang<yaml>
        {
            "short-name" : "authenticated-download",
            "module" : "Zef::Service::AuthenticatedDownload",
            "options" : { 
                "configured-hosts" : [
                    {
                        "hostname" : "localhost",
                        "auth-type" : "opaque-token",
                        "token" :  "supersecret"
                    }
                ]
            }
        },
=end code

This will make zef use the configured credential for the host in question. If
you do not want to put the credential into the config file, you can also leave
it out and supply it via the C<ZEF_AUTH_OPAQUE_TOKEN> environment variable.

=head1 AUTHORS

Robert Lemmen (2018-2020), Elizabeth Mattijsen <liz@raku.rocks> (2021-)

Source can be located at: https://github.com/lizmat/ReadWriteLock . Comments and
Pull Requests are welcome.

=head1 COPYRIGHT AND LICENSE

Copyright 2018-2020 Robert Lemmen, 2021 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
